{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Operations from './operations';\nvar operations = Operations;\n\nvar add = function add(newOperations) {\n  operations = _objectSpread(_objectSpread({}, operations), newOperations);\n};\n\nvar addOperations = function addOperations(operations) {\n  add(operations);\n};\n\nvar addOperation = function addOperation(name, operation) {\n  var operations = {};\n  operations[name] = operation;\n  add(operations);\n};\n\nexport { addOperation, addOperations };\nexport default {\n  get all() {\n    return operations;\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}